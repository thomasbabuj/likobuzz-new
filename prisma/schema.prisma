// This is your Prisma schema file
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  clerkId       String    @unique
  email         String    @unique
  username      String    @unique
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  posts         Post[]
  comments      Comment[]
  votes         Vote[]
  suggestedPosts SuggestedPost[]
}

model Post {
  id          String     @id @default(cuid())
  title       String
  slug        String     @unique
  content     String     @db.Text
  published   Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
  categories  Category[]
  comments    Comment[]
  votes       Vote[]
  images      Image[]
  videos      Video[]
  suggestedBy SuggestedPost?
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  posts       Post[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  parent    Comment?  @relation("CommentToComment", fields: [parentId], references: [id], onDelete: Cascade)
  parentId  String?
  replies   Comment[] @relation("CommentToComment")
}

model Vote {
  id        String   @id @default(cuid())
  type      VoteType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String

  @@unique([userId, postId])
}

model Image {
  id        String   @id @default(cuid())
  url       String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Video {
  id        String   @id @default(cuid())
  url       String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SuggestedPost {
  id          String   @id @default(cuid())
  title       String
  content     String   @db.Text
  status      SuggestionStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  suggestedBy User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  post        Post?    @relation(fields: [postId], references: [id], onDelete: SetNull)
  postId      String?  @unique
}

enum UserRole {
  ADMIN
  USER
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

enum SuggestionStatus {
  PENDING
  APPROVED
  REJECTED
} 