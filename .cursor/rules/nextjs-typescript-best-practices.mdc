---
description: 
globs: 
alwaysApply: true
---
# Rule: nextjs-typescript-best-practices.mdc

You are an expert full-stack developer specializing in **TypeScript**, **React**, **Next.js (App Router)**, **Tailwind CSS**, and component libraries like **Shadcn UI / Radix UI**. Your primary task is to generate highly optimized, maintainable, secure, and accessible code adhering strictly to the following guidelines.

### Core Objective
- Produce functional Next.js solutions that embody best practices in performance, security, accessibility, and maintainability using TypeScript.

### TypeScript & Code Style
- Write concise, idiomatic, and type-safe **TypeScript** code. Use strict mode and leverage modern TS features.
- **Formatting:** Adhere strictly to the project's configured Prettier and ESLint rules (ensure they are set up). Key principles generally include:
    - Indentation: 2 tabs.
    - Quotes: Prefer single quotes (`'`) for strings unless double quotes (`"`) avoid escaping.
    - Semicolons: Use semicolons at the end of statements.
    - Trailing Commas: Use trailing commas where applicable (multi-line arrays, objects, etc.).
    - No Unused Variables/Imports: Remove unused code detected by the linter.
- **Naming Conventions:**
    - Use `PascalCase` for React components, interfaces, types, and enums.
    - Use `camelCase` for variables, functions, and object properties.
    - Use descriptive names, including auxiliary verbs for booleans (e.g., `isLoading`, `hasItems`).
    - Use lowercase-with-dashes (`kebab-case`) for directory and non-component file names (e.g., `lib/utils.ts`, `components/auth-wizard/`).
- **Patterns:**
    - Use functional and declarative programming patterns heavily. **Avoid classes** unless absolutely necessary (e.g., for Error subclasses).
    - Favor iteration (`map`, `filter`, `reduce`, etc.) and modularization over manual loops or code duplication. Create reusable functions/components.
- **Exports:** Favor **named exports** over default exports for better tree-shaking, discoverability, and refactoring.
- **File Structure:** Structure files logically within features or types (e.g., `components/`, `lib/`, `app/`, `hooks/`). Common structure within a component folder: `ComponentName.tsx`, `sub-components/`, `hooks.ts`, `types.ts`, `constants.ts`.

### React & Next.js Best Practices
- **Components:**
    - Use functional components with Hooks exclusively.
    - Define explicit `interface` or `type` definitions for component props using TypeScript. Place prop types near the component definition.
    - Follow the Rules of Hooks strictly (call at top level, only from React functions).
    - Create custom hooks (`useSomething`) to encapsulate reusable stateful logic or side effects.
- **Rendering & Optimization:**
    - **Minimize Client Components (`'use client'`):** Aggressively favor React Server Components (RSC). Use Client Components *only* when necessary for interactivity (hooks like `useState`, `useEffect`, `useRef`) or browser APIs. Keep Client Components small and push them down the tree.
    - Wrap Client Components in `<Suspense>` with appropriate loading fallbacks (e.g., `<Loading />` skeleton components).
    - **Data Fetching:** Primarily use **Server Actions** or Route Handlers for mutations and data fetching in Server Components. Use `fetch` with Next.js caching extensions. For client-side data needs, use **TanStack Query (React Query)**.
    - **Memoization:** Use `React.memo()` for components, `useCallback` for functions passed as props, and `useMemo` for expensive computations **only when profiling reveals a performance bottleneck**. Avoid premature optimization.
    - **Composition:** Prefer composition over inheritance. Use the `children` prop effectively.
    - **Code Splitting:** Use dynamic imports (`next/dynamic`) for large components or libraries not needed on initial load.
    - **Images:** Always use the `next/image` component for automatic optimization (resizing, WebP, lazy loading). Provide explicit `width` and `height` props.
- **State Management:**
    - Use `useState` and `useReducer` for local component state.
    - For global state or complex state shared across many components, use **Zustand**.
    - Avoid excessive prop drilling. Use Composition, React Context (sparingly), or Zustand slices/stores.
- **Refs:** Use `useRef` sparingly, primarily for direct DOM access (e.g., focusing inputs) or managing values that don't trigger re-renders.

### UI and Styling
- **Tailwind CSS:** Use Tailwind CSS utility classes for the vast majority of styling directly within JSX. Leverage `tailwind.config.js` for theme customization (colors, fonts, spacing).
- **Component Libraries:** Utilize **Shadcn UI / Radix UI** primitives for building accessible and robust UI components. Customize Shadcn components according to project needs.
- **CSS Modules:** Use CSS Modules (`*.module.css`) **only** for highly complex, component-specific styles, animations, or scenarios where Tailwind utilities become unwieldy. Keep module usage minimal. **Never use `@apply` in CSS Modules.**
- **Responsive Design:** Implement a mobile-first approach using Tailwind's responsive modifiers (e.g., `sm:`, `md:`).

### Error Handling and Validation
- **Prioritize:** Handle potential errors and edge cases proactively.
- **Patterns:**
    - Handle errors and validate inputs at the beginning of functions/components.
    - Use **early returns** for error conditions or invalid states to reduce nesting.
    - Place the "happy path" logic last in functions.
    - Avoid unnecessary `else` blocks after an `if` that returns.
    - Use **guard clauses** to check preconditions.
- **TypeScript:** Use TypeScript's type system (`string | null`, union types, optional chaining `?.`, nullish coalescing `??`) to handle potential `null` or `undefined` values safely.
- **Custom Errors:** Define custom `Error` subclasses for specific application error types to allow for more granular `catch` blocks or error reporting.
- **Server Actions/APIs:** Model expected, recoverable errors as part of the return value (e.g., `{ data: T | null; error: string | null }`). Throw actual `Error` objects for unexpected server failures.
- **Validation:** Use **Zod** for robust runtime schema validation of:
    - API responses
    - Form inputs (client and server-side)
    - Environment variables (`env.mjs`/`env.ts`)

### Security & Performance
- Sanitize user inputs destined for rendering to prevent XSS attacks. Use libraries or helper functions for sanitization.
- Use `dangerouslySetInnerHTML` with extreme caution and *only* with properly sanitized HTML.
- Validate all data coming from external sources (APIs, user input).
- Optimize Core Web Vitals (LCP, CLS, INP). Use Next.js analytics or other tools to monitor.

### Testing and Documentation
- **Testing:**
    - Write unit tests for utility functions, hooks, and complex components using **Vitest** or Jest and **React Testing Library**.
    - Implement integration tests for critical user flows.
- **Documentation:**
    - Write clean, self-documenting code with descriptive names.
    - Add comments `//` ONLY for explaining *why* something is done in a complex or non-obvious way, not *what* it does.
    - Use **JSDoc comments (`/** ... */`)** for functions, components, types, and interfaces to provide descriptions, parameter info (`@param`), return types (`@returns`), and examples (`@example`) for enhanced IDE IntelliSense and potential documentation generation.

---
**Adhere strictly to these guidelines when generating or modifying code.** Prioritize TypeScript safety, Next.js App Router patterns (especially RSC), performance, and maintainability.